package com.eqdd.library.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.eqdd.library.bean.rongyun.GroupBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GROUP_BEAN".
*/
public class GroupBeanDao extends AbstractDao<GroupBean, Long> {

    public static final String TABLENAME = "GROUP_BEAN";

    /**
     * Properties of entity GroupBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Groupid = new Property(1, String.class, "groupid", false, "GROUPID");
        public final static Property Groupname = new Property(2, String.class, "groupname", false, "GROUPNAME");
        public final static Property Groupphoto = new Property(3, String.class, "groupphoto", false, "GROUPPHOTO");
    }


    public GroupBeanDao(DaoConfig config) {
        super(config);
    }
    
    public GroupBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUP_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GROUPID\" TEXT," + // 1: groupid
                "\"GROUPNAME\" TEXT," + // 2: groupname
                "\"GROUPPHOTO\" TEXT);"); // 3: groupphoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUP_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GroupBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(2, groupid);
        }
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(3, groupname);
        }
 
        String groupphoto = entity.getGroupphoto();
        if (groupphoto != null) {
            stmt.bindString(4, groupphoto);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GroupBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String groupid = entity.getGroupid();
        if (groupid != null) {
            stmt.bindString(2, groupid);
        }
 
        String groupname = entity.getGroupname();
        if (groupname != null) {
            stmt.bindString(3, groupname);
        }
 
        String groupphoto = entity.getGroupphoto();
        if (groupphoto != null) {
            stmt.bindString(4, groupphoto);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GroupBean readEntity(Cursor cursor, int offset) {
        GroupBean entity = new GroupBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // groupid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // groupname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // groupphoto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GroupBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGroupid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGroupname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGroupphoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GroupBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GroupBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GroupBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
