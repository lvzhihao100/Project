package com.eqdd.library.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.eqdd.library.bean.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uname = new Property(1, String.class, "uname", false, "UNAME");
        public final static Property Iphoto = new Property(2, String.class, "iphoto", false, "IPHOTO");
        public final static Property Pname = new Property(3, String.class, "pname", false, "PNAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Sex = new Property(5, int.class, "sex", false, "SEX");
        public final static Property Nation = new Property(6, String.class, "nation", false, "NATION");
        public final static Property Birth = new Property(7, String.class, "birth", false, "BIRTH");
        public final static Property Bplace = new Property(8, String.class, "bplace", false, "BPLACE");
        public final static Property Email = new Property(9, String.class, "email", false, "EMAIL");
        public final static Property Comid = new Property(10, String.class, "comid", false, "COMID");
        public final static Property Authen = new Property(11, int.class, "authen", false, "AUTHEN");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNAME\" TEXT," + // 1: uname
                "\"IPHOTO\" TEXT," + // 2: iphoto
                "\"PNAME\" TEXT," + // 3: pname
                "\"NAME\" TEXT," + // 4: name
                "\"SEX\" INTEGER NOT NULL ," + // 5: sex
                "\"NATION\" TEXT," + // 6: nation
                "\"BIRTH\" TEXT," + // 7: birth
                "\"BPLACE\" TEXT," + // 8: bplace
                "\"EMAIL\" TEXT," + // 9: email
                "\"COMID\" TEXT," + // 10: comid
                "\"AUTHEN\" INTEGER NOT NULL );"); // 11: authen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
 
        String iphoto = entity.getIphoto();
        if (iphoto != null) {
            stmt.bindString(3, iphoto);
        }
 
        String pname = entity.getPname();
        if (pname != null) {
            stmt.bindString(4, pname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getSex());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(7, nation);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(8, birth);
        }
 
        String bplace = entity.getBplace();
        if (bplace != null) {
            stmt.bindString(9, bplace);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String comid = entity.getComid();
        if (comid != null) {
            stmt.bindString(11, comid);
        }
        stmt.bindLong(12, entity.getAuthen());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uname = entity.getUname();
        if (uname != null) {
            stmt.bindString(2, uname);
        }
 
        String iphoto = entity.getIphoto();
        if (iphoto != null) {
            stmt.bindString(3, iphoto);
        }
 
        String pname = entity.getPname();
        if (pname != null) {
            stmt.bindString(4, pname);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
        stmt.bindLong(6, entity.getSex());
 
        String nation = entity.getNation();
        if (nation != null) {
            stmt.bindString(7, nation);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(8, birth);
        }
 
        String bplace = entity.getBplace();
        if (bplace != null) {
            stmt.bindString(9, bplace);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(10, email);
        }
 
        String comid = entity.getComid();
        if (comid != null) {
            stmt.bindString(11, comid);
        }
        stmt.bindLong(12, entity.getAuthen());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // iphoto
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.getInt(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nation
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // birth
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // bplace
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // email
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // comid
            cursor.getInt(offset + 11) // authen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIphoto(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.getInt(offset + 5));
        entity.setNation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBirth(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBplace(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmail(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAuthen(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
